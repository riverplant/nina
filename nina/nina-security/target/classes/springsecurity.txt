AuthenticationProvider:提供身份认证逻辑

UserDetails:用户身份信息的接口实现
用户信息通过UserDetailService接口的实现来获取!!!!!!
我们需要自己实现一个UserDetailService，在实现类里定义自己的
HttpBasic认证流程主要是通过BasicAuthenticationFIlter.doFilterInternal()

Session集群管理:通过spring session来自己管理session
<dependency>
        <groupId>org.springframework.session</groupId>
        <artifactId>spring-session-jdbc</artifactId>
      </dependency>
     <dependency>
     
需要自己创建SPRING_SESSION数据库表
***********spring-session-jdbc-2.1.6RELEASE.jar**************************
org.springframework.session.jdbc
schema-mysql.sql

CREATE TABLE SPRING_SESSION (
	PRIMARY_ID CHAR(36) NOT NULL,
	SESSION_ID CHAR(36) NOT NULL,
	CREATION_TIME BIGINT NOT NULL,
	LAST_ACCESS_TIME BIGINT NOT NULL,
	MAX_INACTIVE_INTERVAL INT NOT NULL,
	EXPIRY_TIME BIGINT NOT NULL,
	PRINCIPAL_NAME VARCHAR(100),
	CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
	SESSION_PRIMARY_ID CHAR(36) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
	ATTRIBUTE_BYTES BLOB NOT NULL,
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
	CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;
*********************************spring-session-jdbc-2.1.6RELEASE.jar*************


-------------授权------------------------------------------------------
1.GrantedAuthority接口:用户被授予的权限
String getAuthority():返回一串用户权限

2.AbstractSecurityInterceptor: 类似AOP，拦截安全对象
/**
authenticated:通过认证后的用户信息，getPrincipal()可以获得该用户的所有权限
object:用户想要访问的受保护对象
attributes:判断用户是否能访问object的权限规则集合
*/
this.accessDecisionManager.decide(authenticated,object,attributes)


3.ConfigAttribute:需要判断的权限规则

//AccessDecisionVoter:执行具体的判断逻辑
4.AccessDecisionManager -> AbstractAccessDecisionManager
  List<AccessDecisionVoter<? extends Object>> decisionVotes;

  
  AbstractSecurityInterceptor --->
     1.FilterSecurityInterceptor: 用来拦截http请求,通过配置来实现
     
     2.MethodSecurityInterceptor:；用来拦截方法调用,通过在方法上使用注解来实现
     
     3.AccessDecisionManager:通过拦截方法后调用该方法来进行投票
 
 
 ***********************权限设计模型******************************
  Manager:realName,username,password,departement,enable role
  管理员
    多 <------>多
  Role: name, memo, resources, managers
  角色，资源的集合
   多 <------>多
  Resources: name, style,  type, urls, roles
  需要被权限管理的项目
  多 <------>多
  ServiceUrl: className, MethodName, url 
 服务的地址
  ***********************权限设计模型******************************
  
  1.在UserDetailsServiceImpl中，loadUserByUsername方法里返回的
  Collection<? extends GrantedAuthority> authorities：包含该用户所有能访问的url信息
  
  2.当用户访问资源的时候，NinaSecurity.check方法，会通过request.getRequestURI()获得用户想要访问的资源地址
    Object principal = authentication.getPrincipal();
		if (principal != null && principal instanceof UserDetails) {
			/**
			 * 已经成功登录
			 */
          System.out.println(((UserDetails)principal).getAuthorities());
       获得用户能够访问的资源地址
       最后经过比对后返回true或者是false来决定用户是否能访问
       
*************************权限设计模型**********************************
**************************QAuth2**********************************

RO(resource owner):资源所有者，对资源具有授权能力
RS(resource server):资源服务器
Client:第三方应用,获得RO的授权后可以去访问RS
AS(authorization server):授权服务器，认证RO的身份，为RO提供授权审核过程
 颁发最终授权令牌(Access Token)
grant_type(授权类型):authorization_code授权码模式
 
 认证过程: OAuth2ClientContextFilter<引导用户跳转> ->OAuth2ClientAuthenticationProcessingFilter<获取accessToken,Authorization code如果没有跳转>
------------------------------------------------------------------------

Spring Social------第三方登录--------------------------------------------------
1.微信开发平台，新建应用，配置回调域地址 www.nina.com

2.修改C:\Windows\System32\drivers\etc\hosts文件，将回调域地址指向本机
127.0.0.1     www.nina.com

3.appID:     wxf0c2ff56a8ef1ea3
  appsecret:  b61789e353e49ff9cc7477c071262d0c
  也可以先注册一个测试号: https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login
 
 4.social.connet.UsersConnectionRepository: 一个连接是系统中的用户和第三用户的关联关系
 @Override
	public UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {
		//将系统的用户和第三方用的关系存入数据库
		JdbcUsersConnectionRepository repository = new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, textEncryptor);
		repository.setTablePrefix("pzx_");
		return repository;
	}
	
添加过滤器:SocialAuthenticationFilter
 ///////////////////////////////////////////////////////////////////////
 create table UserConnection (
    userId varchar(255) not null,//业务系统中的用户id
	providerId varchar(255) not null, //第三方的标识(微信，qq, facebook...)
	providerUserId varchar(255), // 第三方的用户openId
	rank int not null,
	displayName varchar(255),//实现名称
	profileUrl varchar(512),//第三方存个人信息的连接
	imageUrl varchar(512),  //头像连接
	accessToken varchar(512) not null, //accessToken
	secret varchar(512),
	refreshToken varchar(512), //刷新
	expireTime bigint,
	primary key (userId, providerId, providerUserId));
create unique index UserConnectionRank on UserConnection(userId, providerId, rank);
/////////////////////////////////////////////////////////////////////////////////////// 
 
 
 
 
------------------------------------------------------------------------  
  protected void configure(HttpSecurity http) throws Exception {
		SpringSocialConfigurer configurer = new SpringSocialConfigurer();
		http.formLogin()// 加入了UsernamePasswordAuthenticationFilter
				.loginPage("/login.html").loginProcessingUrl("/auth")
				// 可以通过配置修改
				.usernameParameter("username").passwordParameter("password")
				.successHandler(ninaAuthenticationSuccessHandler).failureHandler(ninaAuthenticationFaildHandler).and()
				// 加入RememberMeAuthenticationFilter
				.rememberMe().tokenRepository(persistentTokenRepository())// 启用数据库存取token
				.tokenValiditySeconds(60)// 设置token有效期(秒)
				.and().sessionManagement()
				// 针对session fixation攻击
				.sessionFixation().changeSessionId()
				// .invalidSessionUrl("/session.html")
				// .maximumSessions(1)//最大session数为1,用于并发控制
				// .maxSessionsPreventsLogin(true)//达到最大session数就不容许新登录了
				.and().csrf().disable()
				// 创建并且发送XSRF-TOKEN给用户端用于csrf
				// .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
				// .csrf().disable()
				.authorizeRequests()
				/**
				 * 通过该方法设置授权投票器的种类
				 */
				// .accessDecisionManager(accessDecisionManager)
				.antMatchers("/index", "/login.html", "/auth", "/session.html").permitAll()
				// .antMatchers(HttpMethod.GET).permitAll()
				.antMatchers("/test/*").access("hasRole('a') or hasRole('b')").anyRequest()
				//添加SpringSocialConfigurer
				.authenticated().and().apply(configurer);
		/**
		 * ConfigAttribute:需要判断的权限规则
		 * 相当于hasAuthority("admin"), 授权工作在FilterSecurityInterceptor中做
		 */
		// .access("hasAuthority('admin')");
		/**
		 * @ninaSecurity:自定义授权类bean Check:自定义bean中的自定义方法
		 */
		// .anyRequest().access("@ninaSecurity.check(authentication,request)");
	}





