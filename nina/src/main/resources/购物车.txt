1.存储形式
 1.1 Cookie
   无须登录、无须查库、保存在浏览器端
 1.2 Session
    用戶登录后，购物车数据放入用户会话
   [ 基于内存，用户量庞大影响性能 ],不会使用!
 1.3 数据库[购物车表，与用户关联], 不会使用!
 1.4 Redis【使用】 
   1.4.1 用户登录后，购物车数据存入redis缓存
   1.4.2 数据持久化，频繁读写只基于缓存，适用于集群与分布式系统
   
   当用户未登录：使用cookie
   当用户登录： 使用Redis
   
 --在购物车中商品是以规格作为单位！！！！-----------------------------------------------------------
 删除购物车商品：
   当用户未登录：修改cookie：
          从cookie中获取购物车，循环判断规格id与传入的是否相同，如果相同删除改规格，然后刷新cookie
         还需要删除当前的选中项,如果选中项中规格id与传入的相同，删除改规格,最后重新计算选中商品的件数和价格
         
   当用户登录： 修改Redis中购物车的商品数据
   /**********如果用户未登录的情况下想解算购物车，会跳转到登录页面并且用returnUrl设置回跳地址，当登录成功并且回跳地址不为空的时候，页面会回跳到该地址
   if(returnUrl != null && returnUrl != undefined && returnUrl != '')
   { 
      window.location.href = returnUrl;
   } else {
       window.location.href = "index.html";
   }
   
 -----------------结算购物车--------------------------------------------
 1.判断购物车种是否有商品，如果没有商品，直接返回
 2.判断用户时候选中了购物车种需要结算的商品，如果没有，直接返回
 3.判断用户是否已经登录
 4.获得用户所有选中的规格id
 5.从cookie中获取购物车，通过规格id获得被选中的购物车商品，放入一个orderItemList
 6.计算价格 
 
 ------------------订单状态流转---------------------------------
 订单解算 -> 前往支付(待付款) ->[取消订单 | 支付成功 ] ->待发货[商家后台管理系统] ->待收货 ->确认收货 ->订单完成

-------------------复杂订单状态----------------------------------
待付款 -> 付款中[第三方支付平台,通过异步回调,修改订单状态为付款中] ->[订单取消 ->交易关闭|付款成功  ]
     ->[取消订单，代付款(由会计人员审核) -> 已退款->交易关闭 | 已发货  ] ->确认收货->[申请退货 |交易成功 ]