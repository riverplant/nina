服务解耦 / 削峰填谷  / 异步化缓冲

生产端可靠性投递  /   消息端幂等

/--------核心概念RabbitMQ/RokcetMQ/Kafka----------------------------------------/

AMQP:高级消息队列协议:二进制协议

exchange 多对多个 Message Queue 
[1个exchenge对多个MQ是推荐的]

server(安装的MQ的节点): Broker,接受客户端的连接，实现AMQP实体服务
Connection: 连接，应用程序与
Channel:连接后，客户端可以创建多个网络信道,每个Channel代表一个会话任务,Channel可以被保存，下次直接使用
Message:消息。数据格式由Properties和Body组成
        Properties:对消息进行修饰，例如优先级,过期时间,延迟等
        Body:消息体内容
Virtual host:虚拟地址，用于逻辑隔离，一个Virtual host中可以有多个Exchange和Queue,
                                同一个Virtual host里面不能有相同名称的Exchange(Topic主题)或Queue
            /a: Virtual host业务域/a
            /b: Virtual host业务域/b 
Exchange: 交换机，接收消息，根据[路由键]转发消息到绑定的队列
Binding:Exchange和Queue之间的虚拟连接，binding中可以包含routing key
Routing key:路由规则
Queue: 消息队列，保存消息并且转发给消费者

/--------核心概念RabbitMQ/RokcetMQ/Kafka----------------------------------------/
假设配置三天服务器:71,72,73

在每一台上分贝配置  vim /etc/hostname   
          71： 配置主机名 bhz71
          72： 配置主机名 bhz72
          73： 配置主机名 bhz73

配置  vim /etc/hosts

在每一台上都配置好三个路由信息          
71： 配置 192.168.11.71 bhz71
           配置 192.168.11.72 bhz72
           配置 192.168.11.73 bhz73
           
72： 配置 192.168.11.71 bhz71
           配置 192.168.11.72 bhz72
           配置 192.168.11.73 bhz73
           
73： 配置 192.168.11.71 bhz71
           配置 192.168.11.72 bhz72
           配置 192.168.11.73 bhz73

这样这三台服务器可以通过主机名称互ping

---------------------------------------------------------------------
安装erlang 语言rpm
安装sicat rpm  提供秘钥
安装rabbitmq-server rpm

修改 rabbit.app 配置文件
1.loopback_users 中的[<<"guest">>]修改为["guest"],用于用户登录
2.heartbeat 60 用于心跳连接

启动rabbitmq 服务(查看是否启动 lsof -i:5672 [5672为默认端口])

/etc/init.d/rabbitmq-server start | stop | status | restart

安装插件:
rebbitmq-plugins enable rabbitmq_management

lsof -i:15672 || netstat -tnlp | grep 15672 查看管理端口是否启动

访问：
http://ip:15672/

-------代码编写----------------------------------------------------
1.ConnectionFactory


2.Connection


3.Channel


4.Queue


5.Producer&Consumer

1.Exchange:接收消息，根据消息的路游键转发消息所绑定的队列

2.Topic【效率最低】:接收正则表达式的模糊匹配
   #： 匹配一个或多个词
     log.#   能匹配到 log.info.oa
   *： 匹配不多不少一个词
     log.*  只能匹配到log.erro
   
3.Fanout[效率最高]:不处理路游键，只需要简单地将队列绑定到交换机


------------------Message 属性-----------------------
1.correlation_id: 唯一标识id
2.expiration
---------------高级特性--------------------------------

1.消息保障100%的投递
     1.1 保障消息的成功发出
                     消息落库，对消息状态进行打标
                     
     1.2 保障MQ节点的成功接收
         
     1.3 发送端收到MQ节点(Broker)确认答应

2.消费端实现幂等保障。
      2.1 业务唯一ID，指纹码，利用数据库主键去重

3.Confirm消息确定机制
      生产者投递消息后，如果Broker收到消息，给生产这一个应答，该过程为异步过程，生产者对Broker进行监听
   ACK:确认消息
   3.1:在channel上开启确认模式:channel.confirmSelect()
   3.2:在channel上添加监听：addConfirmListener,监听成功和失败的返回结果，
                   根据具体的结果对消息进行重发，或者记录日志等后续处理。
4. Return Listener 用于处理一些不可路由的消息（例如路由写错无法路由
        我们通过Return Listener 来监听这种不可达消息）
   Mandatory：如果为true, 监听器会接收路由不可达消息，进行后续处理，如果为
              false, broker端会自动删除该消息

5. 消费端限流
    QOS(服务质量保证):当通过consume或者channel设置Qos值，可以实现如果一定数目的
    消息未被确认前，不会进行消费新的消息
    /**
    prefetchSize:报文大小
    prefactchCount:报文数量,不要给同一个消费者推送多于prefactchCount个消息
    blobal:是否将设置应用于channel
          在自动应答的情况下参数不生效
    **/
    void BasicQos(uint prefetchSize, ushort prefactchCount, bool blobal);

6.ACK与重回队列[工作中一般选择手工ACK]
  ACK:消费成功
  
  NACK:处理失败,消费失败，回复一个NACK
  
     手工进行ACK确保消费端消费成功
    
     重回队列:消息处理失败后，把消息重新回递给Broker(容易引起无限制处理不了数组)  

------------TTL【生存时间】队列/消息-----------------------------

1. RabbitMQ支持消息的过期时间，在消息发送时可以指定

2. RabbitMQ支持队列的过期时间，从消息发送到队列开始计算，只要查过了队列的超时时间设置，消息就自动清除

3. 死信队列: DLX Dead-Letter-exchange
   
       利用 DLX, 当一个消息在队列中成为死信(TTL过期)，可以被从新publish到另外一个Exchange中,该Exchange为DLX
       
       3.1 消息在队列中成为死信
          消息被拒绝(basic.rejet/basic.nack)并且 requeue = false
          
       3.2  消息TTL过期
       
       3.3  队列达到最大长度

4. 设置死信队列：
       4.1 设置死信队列的exchange和queue
        dlx.exchange
        dlx.queue
        routingkey....
        
       
       4.2 在正常交换机、队列中加上参数
       arguments.put("x-dead-letter-exchange", "dlx.exchange")
       
 -----------------镜像模式----------------------------------------
 -----------------springboot------------
 生产端核心配置:
 spring.rabbitmq.publisher-confirms=true
 spring.rabbitmq.publisher-returns=true
 spring.rabbitmq.template-mandatory=true
      
消费端:
  spring.rabbitmq.listener.simple.acknowledge-mode=MANUAL
  spring.rabbitmq.listener.simple.concurrency=1
  spring.rabbitmq.listener.simple.max-concurrency=5

@RabbitMQListener消费端监听注解
@QueueBinding
@Queue
@Exchange

@RabbitListener(bindings = @QueueBinding(
                 value = @Queue(value = "queue-1", durable = "true"),
                 exchange = @Exchange(value = "exchange-1",
                  durable = "true", 
                  type = "topic", 
                  ignoreDeclarationExceptions = "true"),//exchange
                  key = "springboot.*")
                 )
@RabbitHandler
public void onMessage(Message message, Channel channel) throws Exception {

}
------------------启动命令---------------------
rebbitmq-server-detached




